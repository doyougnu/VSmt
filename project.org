* Project setup
** DONE Redirect dante to the nix directory
   CLOSED: [2020-08-31 Mon 11:28]
    I had setup .dir-locals.el to do this but dante still died for some reason

* Hygiene

** TODO Explicit module exports

** TODO continuous integration

** TODO Hackage package

** TODO heroku server

* Variational Solver

** Performance

*** Store Ref (SRef SVal) in the state maps instead of the SBV a
    the idea here is to avoid lots of pack and unpacking of these values. The
    average case has is way more lookups then generations, so when we lookup we
    don't want any extra actions

*** Remove CV's from result maps and just construct the string to represent smtlib program

** Optimizations

*** TODO Constant Folding

*** TODO Copy Propagation
    If we find a statement like:
    #+begin_example
    (assert (== x 2))
    #+end_example
    then do we perform propagation for x -> 2?

** DONE Result module
   CLOSED: [2020-09-03 Thu 18:51]

** TODO shallow embedded for ease of creating data on the fly

** TODO Server setup

** TODO REPL setup

** TODO Hackage documentation

** IN PROG Solver

   - Note taken on [2020-09-15 Tue 15:59] \\
     I noticed that evaluate', the form of evaluate that works on arithmetics had
     type ~IL' -> IL'~. This is strange because it is pure! Then I noticed that
     ~evaluate'~ was _identical_ to ~accumulate'~ which makes sense because
     accumulation is pure symbolic evaluation. Hence I removed ~evaluate'~ in favor
     of ~accumulate'~ which is more accurate about the effects that are occurring

   - Note taken on [2020-09-15 Tue 02:36] \\
     Fixed the result accumulation. I employed a Maybe to wrap around the Variant
     Context. There needs to be hygiene work next, the code doesn't read well and
     neither do the types. Which means that now I have a working implementation some
     refactoring is in order

   - Note taken on [2020-09-14 Mon 18:36] \\
     Solver core is working for up to two choices now. However, the result module is not accumulating results properly. There are several problems:
     1. mappend is erasing previous results
     2. We fundamentally need a way to demarcate between variables which are local to the assertion stack and those which are not
     3. the ~ite~ building is not occurring the linked list of return values

*** DONE Boolean solving
    CLOSED: [2020-09-15 Tue 15:08]

*** DONE Arithmetic smt solving
    CLOSED: [2020-09-16 Wed 12:45]

*** Variant Contexts can be used to limit the solver

*** Investigate possible uses of StableName

*** Investigate possible uses with IORef patterns

* Testing

** TODO hedgehog properties vs quickcheck properties

** TODO Tasty setup and harness

** DONE Quickcheck/smallcheck generators
   CLOSED: [2020-09-16 Wed 14:40]

** Quickcheck/smallcheck properties

* Benchmarking

** TODO Gauge setup

** TODO bench-show
